# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
template1 = '''{z0:08b}  {z1:08b}  {z2:08b}  {z3:08b}'''

template = '''
Network:
{z0:<8}  {z1:<8}  {z2:<8}  {z3:<8}
{z0:08b}  {z1:08b}  {z2:08b}  {z3:08b}


Mask:
{mask}
{m0:<8}  {m1:<8}  {m2:<8}  {m3:<8}
{m0:08b}  {m1:08b}  {m2:08b}  {m3:08b}
'''
template1 = '''{z0:08b}{z1:08b}{z2:08b}{z3:08b}'''

template = '''
Network:
{z0:<8}  {z1:<8}  {z2:<8}  {z3:<8}
{z0:08b}  {z1:08b}  {z2:08b}  {z3:08b}


Mask:
{mask}
{m0:<8}  {m1:<8}  {m2:<8}  {m3:<8}
{m0:08b}  {m1:08b}  {m2:08b}  {m3:08b}
'''
k = input('Введите адрес в формате Х.Х.Х.Х/Х: ')
m = k[:-3].split('.')
g = template1.format(z0 = int(m[0]), z1 = int(m[1]), z2 = int(m[2]), z3 = int(m[3]))
g = g[:int(k[-2:])] + '0' * (32 - int(k[-2:]))
d = '1' * int(k[-2:]) + '0' * (32 - int(k[-2:]))
print(template.format(z0 = int(g[:8], 2), z1 = int(g[8:16], 2), z2 = int(g[16:24], 2), z3 = int(g[24:], 2), mask = k[-3:], m0 = int(d[:8], 2), m1 = int(d[8:16], 2), m2 = int(d[16:24], 2), m3 = int(d[24:], 2)))